import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Plus, ChevronRight, ChevronDown } from 'lucide-react';
import { auth } from '@/auth';
import { redirect } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import Link from 'next/link';

// Account type with children
type AccountWithChildren = {
  id: string;
  code: string;
  name: string;
  type: string;
  parentId: string | null;
  currentBalance: number;
  active: boolean;
  isSystem: boolean;
  autoGenerated: boolean;
  linkedEntityType: string | null;
  children?: AccountWithChildren[];
};

// Build hierarchical tree
function buildAccountTree(
  accounts: AccountWithChildren[]
): AccountWithChildren[] {
  const accountMap = new Map<string, AccountWithChildren>();
  const rootAccounts: AccountWithChildren[] = [];

  // First pass: create map
  accounts.forEach((account) => {
    accountMap.set(account.id, { ...account, children: [] });
  });

  // Second pass: build tree
  accounts.forEach((account) => {
    const node = accountMap.get(account.id)!;
    if (account.parentId) {
      const parent = accountMap.get(account.parentId);
      if (parent) {
        parent.children = parent.children || [];
        parent.children.push(node);
      } else {
        rootAccounts.push(node);
      }
    } else {
      rootAccounts.push(node);
    }
  });

  return rootAccounts;
}

// Render account row with indentation
function AccountRow({
  account,
  level = 0,
}: {
  account: AccountWithChildren;
  level?: number;
}) {
  const hasChildren = account.children && account.children.length > 0;
  const indent = level * 24; // 24px per level

  return (
    <>
      <div className="flex items-center border-b py-3 px-4 hover:bg-muted/50">
        <div
          className="flex items-center flex-1"
          style={{ paddingLeft: `${indent}px` }}
        >
          {hasChildren ? (
            <ChevronDown className="h-4 w-4 mr-2 text-muted-foreground" />
          ) : level > 0 ? (
            <ChevronRight className="h-4 w-4 mr-2 text-muted-foreground opacity-0" />
          ) : null}
          <span className="font-mono text-sm w-24 flex-shrink-0">
            {account.code}
          </span>
          <span className={level === 0 ? 'font-semibold' : ''}>
            {account.name}
          </span>
          {account.autoGenerated && (
            <span className="ml-2 text-xs text-blue-600 bg-blue-50 px-2 py-0.5 rounded">
              Auto
            </span>
          )}
          {account.isSystem && (
            <span className="ml-2 text-xs text-purple-600 bg-purple-50 px-2 py-0.5 rounded">
              System
            </span>
          )}
        </div>
        <div className="flex items-center gap-4">
          <span className="text-xs text-muted-foreground w-20">
            {account.type}
          </span>
          <span className="font-mono text-sm w-24 text-right">
            ${account.currentBalance.toLocaleString()}
          </span>
          <span
            className={`text-xs w-16 ${account.active ? 'text-green-600' : 'text-red-600'}`}
          >
            {account.active ? 'Active' : 'Inactive'}
          </span>
        </div>
      </div>
      {hasChildren &&
        account.children!.map((child) => (
          <AccountRow key={child.id} account={child} level={level + 1} />
        ))}
    </>
  );
}

export default async function ChartOfAccountsPage() {
  const session = await auth();

  // Only accountants and admins can access this page
  if (session?.user.role !== 'ACCOUNTANT' && session?.user.role !== 'ADMIN') {
    redirect('/dashboard');
  }

  // Fetch all accounts
  const accounts = await prisma.chartOfAccount.findMany({
    where: {
      active: true,
    },
    orderBy: {
      code: 'asc',
    },
  });

  const accountTree = buildAccountTree(accounts as AccountWithChildren[]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Chart of Accounts</h1>
          <p className="text-muted-foreground">
            Manage your accounting accounts hierarchy
          </p>
        </div>
        <Link href="/dashboard/accounts/new">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            New Account
          </Button>
        </Link>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Total Accounts</CardDescription>
            <CardTitle className="text-3xl">{accounts.length}</CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Assets</CardDescription>
            <CardTitle className="text-3xl">
              {accounts.filter((a) => a.type === 'ASSET').length}
            </CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Liabilities</CardDescription>
            <CardTitle className="text-3xl">
              {accounts.filter((a) => a.type === 'LIABILITY').length}
            </CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Income</CardDescription>
            <CardTitle className="text-3xl">
              {accounts.filter((a) => a.type === 'INCOME').length}
            </CardTitle>
          </CardHeader>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>Expenses</CardDescription>
            <CardTitle className="text-3xl">
              {accounts.filter((a) => a.type === 'EXPENSE').length}
            </CardTitle>
          </CardHeader>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Account Hierarchy</CardTitle>
          <CardDescription>
            Hierarchical view of all active accounts
          </CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          <div className="border-t">
            <div className="flex items-center border-b py-2 px-4 bg-muted/50 font-medium text-sm">
              <div className="flex-1">Account</div>
              <div className="flex items-center gap-4">
                <span className="w-20">Type</span>
                <span className="w-24 text-right">Balance</span>
                <span className="w-16">Status</span>
              </div>
            </div>
            {accountTree.map((account) => (
              <AccountRow key={account.id} account={account} />
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
