import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/auth';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

// Validation schema for creating/updating clients
const clientSchema = z.object({
  name: z.string().min(1, 'Client name is required'),
  email: z.string().email('Invalid email address').optional().or(z.literal('')),
  phoneNumber: z.string().optional(),
  billingAddress: z.string().optional(),
  paymentTerms: z.string().optional(),
  active: z.boolean().default(true),
  createReceivableAccount: z.boolean().default(true),
});

// Helper function to find next available account code
async function getNextAccountCode(parentCode: string): Promise<string> {
  const accounts = await prisma.chartOfAccount.findMany({
    where: {
      code: {
        startsWith: parentCode,
      },
    },
    orderBy: {
      code: 'desc',
    },
    take: 1,
  });

  if (accounts.length === 0) {
    return `${parentCode}1`;
  }

  const lastCode = accounts[0].code;
  const suffix = parseInt(lastCode.substring(parentCode.length)) || 0;
  return `${parentCode}${suffix + 1}`;
}

// GET /api/clients - List all clients
export async function GET(request: NextRequest) {
  try {
    const session = await auth();

    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const active = searchParams.get('active');

    const where: { active?: boolean } = {};

    if (active !== null) {
      where.active = active === 'true';
    }

    const clients = await prisma.client.findMany({
      where,
      orderBy: {
        name: 'asc',
      },
      include: {
        projects: {
          select: {
            id: true,
            name: true,
            status: true,
          },
        },
      },
    });

    return NextResponse.json(clients);
  } catch (error) {
    console.error('Get clients error:', error);
    return NextResponse.json(
      { error: 'Failed to retrieve clients' },
      { status: 500 }
    );
  }
}

// POST /api/clients - Create a new client
export async function POST(request: NextRequest) {
  try {
    const session = await auth();

    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Only ADMIN and ACCOUNTANT can create clients
    if (session.user.role !== 'ADMIN' && session.user.role !== 'ACCOUNTANT') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const body = await request.json();
    const validation = clientSchema.safeParse(body);

    if (!validation.success) {
      return NextResponse.json(
        { error: validation.error.errors[0].message },
        { status: 400 }
      );
    }

    const data = validation.data;

    // Check if client with same name already exists
    const existingClient = await prisma.client.findFirst({
      where: { name: data.name },
    });

    if (existingClient) {
      return NextResponse.json(
        { error: `Client "${data.name}" already exists` },
        { status: 409 }
      );
    }

    let receivableAccountId: string | undefined;

    // Create A/R account for the client if requested
    if (data.createReceivableAccount) {
      // Find the parent A/R account (1100)
      const parentAccount = await prisma.chartOfAccount.findUnique({
        where: { code: '1100' },
      });

      if (!parentAccount) {
        return NextResponse.json(
          { error: 'Accounts Receivable parent account (1100) not found' },
          { status: 500 }
        );
      }

      // Get next available account code
      const accountCode = await getNextAccountCode('1100');

      // Create the A/R sub-account
      const arAccount = await prisma.chartOfAccount.create({
        data: {
          code: accountCode,
          name: `AR - ${data.name}`,
          type: 'ASSET',
          parentId: parentAccount.id,
          linkedEntityType: 'CLIENT',
          autoGenerated: true,
          description: `Accounts Receivable for ${data.name}`,
        },
      });

      receivableAccountId = arAccount.id;
    }

    // Create the client
    const client = await prisma.client.create({
      data: {
        name: data.name,
        email: data.email || null,
        phoneNumber: data.phoneNumber,
        billingAddress: data.billingAddress,
        paymentTerms: data.paymentTerms,
        active: data.active,
        receivableAccountId,
      },
      include: {
        projects: true,
      },
    });

    // Update the linked account with the client ID
    if (receivableAccountId) {
      await prisma.chartOfAccount.update({
        where: { id: receivableAccountId },
        data: { linkedEntityId: client.id },
      });
    }

    return NextResponse.json(client, { status: 201 });
  } catch (error) {
    console.error('Create client error:', error);
    return NextResponse.json(
      { error: 'Failed to create client' },
      { status: 500 }
    );
  }
}
