import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/auth';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

// Validation schema for creating/updating accounts
const accountSchema = z.object({
  code: z
    .string()
    .min(4, 'Account code must be at least 4 characters')
    .max(10, 'Account code must not exceed 10 characters')
    .regex(/^\d+$/, 'Account code must contain only numbers'),
  name: z.string().min(1, 'Account name is required'),
  type: z.enum(['ASSET', 'LIABILITY', 'EQUITY', 'INCOME', 'EXPENSE']),
  parentId: z.string().optional(),
  description: z.string().optional(),
  isSystem: z.boolean().default(false),
  linkedEntityType: z
    .enum(['PROJECT', 'FREELANCER', 'CLIENT', 'FOUNDER'])
    .optional(),
  linkedEntityId: z.string().optional(),
  autoGenerated: z.boolean().default(false),
});

// GET /api/accounts - List all accounts with optional filters
export async function GET(request: NextRequest) {
  try {
    const session = await auth();

    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const type = searchParams.get('type');
    const parentId = searchParams.get('parentId');
    const includeChildren = searchParams.get('includeChildren') === 'true';

    const where: {
      type?: string;
      parentId?: string | null;
    } = {};

    if (type) {
      where.type = type;
    }

    if (parentId !== null) {
      where.parentId = parentId || null;
    }

    const accounts = await prisma.chartOfAccount.findMany({
      where,
      include: {
        parent: true,
        children: includeChildren,
      },
      orderBy: {
        code: 'asc',
      },
    });

    return NextResponse.json(accounts);
  } catch (error) {
    console.error('Get accounts error:', error);
    return NextResponse.json(
      { error: 'Failed to retrieve accounts' },
      { status: 500 }
    );
  }
}

// POST /api/accounts - Create a new account
export async function POST(request: NextRequest) {
  try {
    const session = await auth();

    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Only ADMIN and ACCOUNTANT can create accounts
    if (session.user.role !== 'ADMIN' && session.user.role !== 'ACCOUNTANT') {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
    }

    const body = await request.json();
    const validation = accountSchema.safeParse(body);

    if (!validation.success) {
      return NextResponse.json(
        { error: validation.error.errors[0].message },
        { status: 400 }
      );
    }

    const data = validation.data;

    // Check if account code already exists
    const existingAccount = await prisma.chartOfAccount.findUnique({
      where: { code: data.code },
    });

    if (existingAccount) {
      return NextResponse.json(
        { error: `Account code ${data.code} already exists` },
        { status: 409 }
      );
    }

    // If parentId is provided, verify parent exists and has matching type
    if (data.parentId) {
      const parent = await prisma.chartOfAccount.findUnique({
        where: { id: data.parentId },
      });

      if (!parent) {
        return NextResponse.json(
          { error: 'Parent account not found' },
          { status: 404 }
        );
      }

      if (parent.type !== data.type) {
        return NextResponse.json(
          {
            error: `Child account type (${data.type}) must match parent account type (${parent.type})`,
          },
          { status: 400 }
        );
      }

      // Validate account code numbering (child should start with parent code)
      if (!data.code.startsWith(parent.code)) {
        return NextResponse.json(
          {
            error: `Child account code must start with parent code (${parent.code})`,
          },
          { status: 400 }
        );
      }
    }

    // Create the account
    const account = await prisma.chartOfAccount.create({
      data: {
        code: data.code,
        name: data.name,
        type: data.type,
        parentId: data.parentId,
        description: data.description,
        isSystem: data.isSystem,
        linkedEntityType: data.linkedEntityType,
        linkedEntityId: data.linkedEntityId,
        autoGenerated: data.autoGenerated,
      },
      include: {
        parent: true,
      },
    });

    return NextResponse.json(account, { status: 201 });
  } catch (error) {
    console.error('Create account error:', error);
    return NextResponse.json(
      { error: 'Failed to create account' },
      { status: 500 }
    );
  }
}
